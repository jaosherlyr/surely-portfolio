@use '../../styles/variable.scss' as *;

.homeGreetings {
  position: relative;
  height: calc(100vh - 6rem);
  overflow: hidden;
  align-content: center;
}

.leftContainerGreetings {
  display: flex;
  flex-direction: column;
  width: 70%;
  position: absolute;
  align-self: center;

  .hello {
    object-fit: contain;
    width: 100%;
  }

  .greetingTxt {
    margin: 3rem 7rem;
    width: 100%;
    position: relative;
  }

  .typewriter {
    display: inline-block;
    white-space: nowrap;
    overflow: hidden;
    border-right: 5px solid;
    position: relative;
    animation: typing 2s steps(13, end), cursor .4s step-end infinite alternate; //TO FIX ISSUE!! not clean animation + width 100% follows the width of greetingsTxt
  }
}

.hand {
  position: absolute;
  height: 120%;
  left: 65%;
  object-fit: cover;
  object-position: left;
  align-self: anchor-center;

  animation: swoopIn 1.5s ease-out forwards, wiggleWithPause 7s ease-in-out infinite 1.5s;
}


// ANIMATIONS
@keyframes cursor {
  50% { border-color: transparent; }  
}

@keyframes typing {
  from {
    width: 0;
  }
  to {
    width: 13ch;
  }
}

@keyframes swoopIn {
  0% {
    transform: translateX(100%) rotate(45deg);
  }
  100% {
    transform: translateX(0) rotate(0deg);
  }
}

@keyframes wiggleWithPause {
  0% { transform: rotate(0deg); }
  5% { transform: rotate(-3deg); }
  10% { transform: rotate(5deg); }
  15% { transform: rotate(-3deg); }
  20% { transform: rotate(0deg); }
  100% { transform: rotate(0deg); }
}


// RESPONSIVE
@media (max-width: $breakpoint-lg) {
  .homeGreetings {
    height: 40rem;
  }

  .leftContainerGreetings {    
    .greetingTxt {
      margin: 2rem 5rem;
    }
  }

  .hand {
    height: 100%;
  }
}

@media (max-width: $breakpoint-md) {
  .homeGreetings {
    height: 30rem;
  }

  .leftContainerGreetings {    
    .greetingTxt {
      margin: 1rem 3rem;
    }
  }
}

@media (max-width: $breakpoint-sm) {
  .homeGreetings {
    height: 20rem;
  }

  .leftContainerGreetings {    
    .greetingTxt {
      margin: 1rem 2rem;
    }
  }
}